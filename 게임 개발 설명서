HTML 의 <canvas> 요소를 사용하여 게임을 제작했습니다. 게임 공간을 표현 할 전역 변수 area를 설정하고 start() 함수로 canvas를 HTML에 그려내고 게임을 실행 할 수 있게 했습니다.

게임의 컨트롤은 키보드 방향키로 제어 할 수 있게 계획을 수립했고 키를 배열에 담아 누르고 있어도 계속 반응 할 수 있게 했습니다. component 생성자 함수들에 newPos(), speedX, speedY 속성을 추가하여 component의 위치를 변경 할 수 있게 했고 newPos()의 기능은 component를 그리기 전에 areaupdate()에서 호출 됩니다.

미사일을 피하는 엑션 게임이기 때문에 프레임을 초당 50회(setInterval(areaupdate, 20))로 설정하였고 component 생성자 함수를 추가하고 관리하기 쉽게 모든 component를 전역변수 object에 담았습니다. areaupdate()를 통해 계속 그려지고 area.clear() 함수로 캔버스 전체를 지울 수 있게 했습니다. area.stop()를 사용하여 component간에 충돌하는 경우 게임을 종료 할 수 있게 했습니다.

여러개의 미사일과 운석이 화면에 그려지기 때문에 미사일과 운석의 component들은 각각의 배열에 담았습니다. 장애물의 충돌과 생성되는 장애물들을 제어하기 위해서는 게임이 실행 될때 프레임을 계산 할 필요성을 느끼게 되었고 area.start()에 frameNo 속성을 추가하고 값을 0으로 설정한 후 everyinterval()를 추가하여 프레임 속도에 맞춰 증가 할 수 있게 했습니다. everyinterval()로 인해 장애물을 일정 프레임 속도에 맞춰 생성 할 수 있게 했고 게임의 재미를 올렸습니다.

추격해오는 미사일과 운석 장애물들을 피하기 위해 방향키를 움직여 우주선을 움직이게 하는 방법에 대해 많은 고민 끝에 배경을 움직여서 우주선이 움직이게끔 보이게 할 계획을 세웠고 bgcomponent 생성자 함수에 용량이 큰 이미지 대신 canvas 크기만큼의 검은색 배경을 모든 방향에 그렸고 배경의 x축과 y축에 따라 배경이 추가되면서 광활한 우주를 표현 했습니다. 사실감을 더하기 위해 bg2component 생성자 함수를 사용하여 canvas의 중심을 따라 느리게 회전하는 이미지를 넣었습니다.

우주선은 canvas의 중심에서 좌, 우 방향키에 따른 회전만 하기 때문에 미사일이 추격하는 목표를 canvas의 중심으로 설정하고 미사일이 생성되는 위치와 canvas 중심의 거리를 계산(Math.sqrt(Math.pow(canvas 중심점 x좌표 - 미사일 x좌표, 2)+Math.pow(canvas 중심점 y좌표 - 미사일 y좌표, 2)))하여 미사일의 속도와 방향을 newPos() 함수로 제어 할 수 있게 했습니다.

구성 요소들 중 미사일과 운석은 충돌로 인한 게임의 상태를 결정하기 때문에 각각의 구성 요소에 crash() 함수를 사용해서 충돌에 관한 것을 제어 했습니다. 미사일과 운석 간의 충돌, 미사일과 우주선 간의 충돌, 운석과 우주선 간의 충돌을 고려하여 mslcomponent()에서는 미사일과 우주선의 충돌을 계산했고 rockcomponent()에서는 운석과 미사일, 운석과 우주선간의 충돌을 계산했습니다.
미사일과 우주선의 충돌을 고민하면서 우주선의 모양이 삼각형에 가까웠고 항상 중심에 위치하고 있다는 것을 고려해 미사일의 y좌표가 우주선 세 꼭지점의 y좌표 범위에 들어갔을때 미사일의 x좌표와 우주선의 삼각형 범위안의 x좌표 값을 비교하여 충돌을 설정했습니다.
운석과 미사일, 운석과 우주선간의 충돌은 운석이 네모에 가깝고 네모영역의 범위를 설정하고 그 안에 운석과 우주선의 x,y좌표가 해당되었을 때 충돌로 인지하도록 설정했습니다.

component간의 충돌시에 우주선과 미사일, 우주선과 운석이 충돌시에는 area.stop()로 게임이 종료되고 미사일과 운석간의 충돌시에 각각의 배열에 넣은 미사일과 운석의 충돌을 확인할 필요가 있었고 for문을 통해 어떤 미사일이 어떤 운석과 충돌했는지 확인할 수 있었습니다.